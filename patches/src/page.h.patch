diff --git a/src/page.h b/src/page.h
index 77a047c..a52bd7a 100644
--- a/src/page.h
+++ b/src/page.h
@@ -64,6 +64,7 @@ extern  __thread randomx_vm *rx_vm;
 #define TMPL_BLOCK                  TMPL_DIR "/block.html"
 #define TMPL_RANDOMX                TMPL_DIR "/randomx.html"
 #define TMPL_TX                     TMPL_DIR "/tx.html"
+#define TMPL_SUPPLY                 TMPL_DIR "/supply.html"
 #define TMPL_ADDRESS                TMPL_DIR "/address.html"
 #define TMPL_MY_OUTPUTS             TMPL_DIR "/my_outputs.html"
 #define TMPL_SEARCH_RESULTS         TMPL_DIR "/search_results.html"
@@ -336,7 +337,7 @@ struct tx_details
     vector<txin_to_key> input_key_imgs;
 
     // public keys and xmr amount of outputs
-    vector<pair<txout_to_key, uint64_t>> output_pub_keys;
+    vector<pair<txout_target_v, uint64_t>> output_pub_keys;
 
     mstch::map
     get_mstch_map() const
@@ -498,7 +499,7 @@ public:
 
 page(MicroCore* _mcore,
      Blockchain* _core_storage,
-     string _deamon_url,
+     string _daemon_url,
      cryptonote::network_type _nettype,
      bool _enable_pusher,
      bool _enable_randomx,
@@ -515,7 +516,7 @@ page(MicroCore* _mcore,
      rpccalls::login_opt _daemon_rpc_login)
         : mcore {_mcore},
           core_storage {_core_storage},
-          rpc {_deamon_url, _daemon_rpc_login},
+          rpc {_daemon_url, _daemon_rpc_login},
           server_timestamp {std::time(nullptr)},
           nettype {_nettype},
           enable_pusher {_enable_pusher},
@@ -551,6 +552,7 @@ page(MicroCore* _mcore,
     template_file["block"]           = get_full_page(xmreg::read(TMPL_BLOCK));
     template_file["randomx"]         = get_full_page(xmreg::read(TMPL_RANDOMX));
     template_file["tx"]              = get_full_page(xmreg::read(TMPL_TX));
+    template_file["supply"]          = get_full_page(xmreg::read(TMPL_SUPPLY));
     template_file["my_outputs"]      = get_full_page(xmreg::read(TMPL_MY_OUTPUTS));
     template_file["rawtx"]           = get_full_page(xmreg::read(TMPL_MY_RAWTX));
     template_file["checkrawtx"]      = get_full_page(xmreg::read(TMPL_MY_CHECKRAWTX));
@@ -577,9 +579,9 @@ index2(uint64_t page_no = 0, bool refresh_page = false)
 {
 
     // we get network info, such as current hash rate
-    // but since this makes a rpc call to deamon, we make it as an async
+    // but since this makes a rpc call to daemon, we make it as an async
     // call. this way we dont have to wait with execution of the rest of the
-    // index2 method, until deamon gives as the required result.
+    // index2 method, until daemon gives as the required result.
     std::future<json> network_info_ftr = std::async(std::launch::async, [&]
     {
         json j_info;
@@ -848,6 +850,35 @@ index2(uint64_t page_no = 0, bool refresh_page = false)
     return mstch::render(template_file["index2"], context);
 }
 
+
+/**
+ * Render the circulating supply information
+ */
+string
+circulating_supply()
+{
+  mstch::map context {};
+  context.emplace("currencies" , mstch::array());
+
+  // get reference to supply map to be field below
+  mstch::array& supply_map = boost::get<mstch::array>(context["currencies"]);
+  vector<pair<string, int64_t>> supply = CurrentBlockchainStatus::get_circulating_supply();
+    for (auto currency: supply) {
+      cerr << currency.first << ":" << currency.second << endl;
+      supply_map.push_back(mstch::map {
+	  {"currency_label", currency.first},
+	  {"amount", xmr_amount_to_str(currency.second, "{:0.3f}")}
+	});
+    }
+    
+    // this is when mempool is on its own page, /mempool
+    add_css_style(context);
+    
+    // render the page
+    return mstch::render(template_file["supply"], context);
+}
+
+
 /**
  * Render mempool data
  */
@@ -1900,7 +1931,7 @@ show_my_outputs(string tx_hash_str,
 
     if (xmr_address_str.empty())
     {
-        return string("Monero address not provided!");
+        return string("Haven address not provided!");
     }
 
     if (viewkey_str.empty())
@@ -2184,7 +2215,7 @@ show_my_outputs(string tx_hash_str,
 
     uint64_t output_idx {0};
 
-    for (pair<txout_to_key, uint64_t>& outp: txd.output_pub_keys)
+    for (pair<txout_target_v, uint64_t>& outp: txd.output_pub_keys)
     {
 
         // get the tx output public key
@@ -2204,7 +2235,12 @@ show_my_outputs(string tx_hash_str,
 
 
         // check if generated public key matches the current output's key
-        bool mine_output = (outp.first.key == tx_pubkey);
+	crypto::public_key out_key;
+	if (outp.first.type() == typeid(txout_to_key))
+	  out_key = boost::get<cryptonote::txout_to_key>(outp.first).key;
+	else if (outp.first.type() == typeid(txout_offshore))
+	  out_key = boost::get<cryptonote::txout_offshore>(outp.first).key;
+        bool mine_output = (out_key == tx_pubkey);
 
         bool with_additional = false;
 
@@ -2217,13 +2253,13 @@ show_my_outputs(string tx_hash_str,
                               tx_pubkey);
 
 
-            mine_output = (outp.first.key == tx_pubkey);
+            mine_output = (out_key == tx_pubkey);
 
             with_additional = true;
         }
 
         // if mine output has RingCT, i.e., tx version is 2
-        if (mine_output && tx.version == 2)
+        if (mine_output && tx.version >= 2)
         {
             // cointbase txs have amounts in plain sight.
             // so use amount from ringct, only for non-coinbase txs
@@ -2259,11 +2295,16 @@ show_my_outputs(string tx_hash_str,
             sum_xmr += outp.second;
         }
 
+	std::string currency = (outp.first.type() == typeid(txout_to_key))
+	  ? "XHV"
+	  : (outp.first.type() == typeid(txout_offshore)) ? "xUSD" : "???";
+	
         outputs.push_back(mstch::map {
-                {"out_pub_key"           , pod_to_hex(outp.first.key)},
+                {"out_pub_key"           , pod_to_hex(out_key)},
                 {"amount"                , xmreg::xmr_amount_to_str(outp.second)},
                 {"mine_output"           , mine_output},
-                {"output_idx"            , fmt::format("{:02d}", output_idx)}
+		{"output_idx"            , fmt::format("{:02d}", output_idx)},
+		{"currency"              , currency}
         });
 
         ++output_idx;
@@ -2527,7 +2568,7 @@ show_my_outputs(string tx_hash_str,
                 }
 
 
-                if (mine_output && mixin_tx.version == 2)
+                if (mine_output && mixin_tx.version >= 2)
                 {
                     // cointbase txs have amounts in plain sight.
                     // so use amount from ringct, only for non-coinbase txs
@@ -2600,7 +2641,7 @@ show_my_outputs(string tx_hash_str,
                         {
                             sum_mixin_xmr += amount;
                         }
-                        else if (mixin_tx.version == 2) // ringct
+                        else if (mixin_tx.version >= 2) // ringct
                         {
                             sum_mixin_xmr += amount;
                             ringct_amount += amount;
@@ -2903,7 +2944,11 @@ show_checkrawtx(string raw_tx_data, string action)
 
                     real_output_indices.push_back(tx_source.real_output);
 
-                    public_key real_out_pub_key = real_txd.output_pub_keys[tx_source.real_output_in_tx_index].first.key;
+                    public_key real_out_pub_key;// HBD = real_txd.output_pub_keys[tx_source.real_output_in_tx_index].first.key;
+		    if (real_txd.output_pub_keys[tx_source.real_output_in_tx_index].first.type() == typeid(txout_to_key))
+		      real_out_pub_key = boost::get<cryptonote::txout_to_key>(real_txd.output_pub_keys[tx_source.real_output_in_tx_index].first).key;
+		    else if (real_txd.output_pub_keys[tx_source.real_output_in_tx_index].first.type() == typeid(txout_offshore))
+		      real_out_pub_key = boost::get<cryptonote::txout_offshore>(real_txd.output_pub_keys[tx_source.real_output_in_tx_index].first).key;
 
                     //cout << "real_txd.hash: "    << pod_to_hex(real_txd.hash) << endl;
                     //cout << "real_txd.pk: "      << pod_to_hex(real_txd.pk) << endl;
@@ -2952,7 +2997,12 @@ show_checkrawtx(string raw_tx_data, string action)
 
                         tx_details txd = get_tx_details(tx);
 
-                        public_key out_pub_key = txd.output_pub_keys[toi.second].first.key;
+                        //public_key out_pub_key = txd.output_pub_keys[toi.second].first.key;
+			crypto::public_key out_pub_key;
+			if (txd.output_pub_keys[toi.second].first.type() == typeid(txout_to_key))
+			  out_pub_key = boost::get<cryptonote::txout_to_key>(txd.output_pub_keys[toi.second].first).key;
+			else if (txd.output_pub_keys[toi.second].first.type() == typeid(txout_offshore))
+			  out_pub_key = boost::get<cryptonote::txout_offshore>(txd.output_pub_keys[toi.second].first).key;
 
 
                         // get block cointaining this tx
@@ -3279,8 +3329,11 @@ show_checkrawtx(string raw_tx_data, string action)
 
                 tx_details real_txd = get_tx_details(real_source_tx);
 
-                public_key real_out_pub_key
-                        = real_txd.output_pub_keys[tx_source.real_output_in_tx_index].first.key;
+		public_key real_out_pub_key;// HBD = real_txd.output_pub_keys[tx_source.real_output_in_tx_index].first.key;
+		if (real_txd.output_pub_keys[tx_source.real_output_in_tx_index].first.type() == typeid(txout_to_key))
+		  real_out_pub_key = boost::get<cryptonote::txout_to_key>(real_txd.output_pub_keys[tx_source.real_output_in_tx_index].first).key;
+		else if (real_txd.output_pub_keys[tx_source.real_output_in_tx_index].first.type() == typeid(txout_offshore))
+		  real_out_pub_key = boost::get<cryptonote::txout_offshore>(real_txd.output_pub_keys[tx_source.real_output_in_tx_index].first).key;
 
                 real_output_pub_keys.push_back(
                         REMOVE_HASH_BRAKETS(fmt::format("{:s}",real_out_pub_key))
@@ -3936,7 +3989,9 @@ show_checkcheckrawoutput(string raw_data, string viewkey_str)
                 {
                     string error_msg = fmt::format(
                             "Cant decode RingCT for output: {:s}",
-                            txout_key.key);
+			    (txp.vout[td.m_internal_output_index].target.type() == typeid(txout_to_key) ?
+			     boost::get<txout_to_key>(txp.vout[td.m_internal_output_index].target).key :
+			     boost::get<txout_offshore>(txp.vout[td.m_internal_output_index].target).key));//txout_key.key);
 
                     context["has_error"] = true;
                     context["error_msg"] = error_msg;
@@ -3967,13 +4022,16 @@ show_checkcheckrawoutput(string raw_data, string viewkey_str)
         }
 
         mstch::map output_info {
-                {"output_no"           , fmt::format("{:03d}", output_no)},
-                {"output_pub_key"      , REMOVE_HASH_BRAKETS(fmt::format("{:s}", txout_key.key))},
-                {"amount"              , xmreg::xmr_amount_to_str(xmr_amount)},
+	  {"output_no"           , fmt::format("{:03d}", output_no)},
+	    {"output_pub_key"      , REMOVE_HASH_BRAKETS(fmt::format("{:s}",
+								     (txp.vout[td.m_internal_output_index].target.type() == typeid(txout_to_key) ?
+								      boost::get<txout_to_key>(txp.vout[td.m_internal_output_index].target).key :
+								      boost::get<txout_offshore>(txp.vout[td.m_internal_output_index].target).key)))},//txout_key.key))},
+	      {"amount"              , xmreg::xmr_amount_to_str(xmr_amount)},
                 {"tx_hash"             , REMOVE_HASH_BRAKETS(fmt::format("{:s}", td.m_txid))},
-                {"timestamp"           , xmreg::timestamp_to_str_gm(blk_timestamp)},
-                {"is_spent"            , is_output_spent},
-                {"is_ringct"           , td.m_rct}
+		  {"timestamp"           , xmreg::timestamp_to_str_gm(blk_timestamp)},
+		    {"is_spent"            , is_output_spent},
+		      {"is_ringct"           , td.m_rct}
         };
 
         ++output_no;
@@ -4218,11 +4276,14 @@ search_txs(vector<transaction> txs, const string& search_text)
 
         // check if output_public_keys matche the search_text
 
-        vector<pair<txout_to_key, uint64_t>>::iterator it2 =
+        vector<pair<txout_target_v, uint64_t>>::iterator it2 =
                 find_if(begin(txd.output_pub_keys), end(txd.output_pub_keys),
-                        [&](const pair<txout_to_key, uint64_t>& tx_out_pk)
+                        [&](const pair<txout_target_v, uint64_t>& tx_out_pk)
                         {
-                            return pod_to_hex(tx_out_pk.first.key) == search_text;
+			  if (tx_out_pk.first.type() == typeid(txout_to_key))
+                            return pod_to_hex(boost::get<cryptonote::txout_to_key>(tx_out_pk.first).key) == search_text;
+			  else if (tx_out_pk.first.type() == typeid(txout_offshore))
+                            return pod_to_hex(boost::get<cryptonote::txout_offshore>(tx_out_pk.first).key) == search_text;
                         });
 
         if (it2 != txd.output_pub_keys.end())
@@ -4451,8 +4512,13 @@ json_transaction(string tx_hash_str)
 
     for (const auto& output: txd.output_pub_keys)
     {
+	crypto::public_key out_key;
+	if (output.first.type() == typeid(txout_to_key))
+	  out_key = boost::get<cryptonote::txout_to_key>(output.first).key;
+	else if (output.first.type() == typeid(txout_offshore))
+	  out_key = boost::get<cryptonote::txout_offshore>(output.first).key;
         outputs.push_back(json {
-                {"public_key", pod_to_hex(output.first.key)},
+                {"public_key", pod_to_hex(out_key)},
                 {"amount"    , output.second}
         });
     }
@@ -5232,7 +5298,7 @@ json_outputs(string tx_hash_str,
     if (address_str.empty())
     {
         j_response["status"]  = "error";
-        j_response["message"] = "Monero address not provided";
+        j_response["message"] = "Haven address not provided";
         return j_response;
     }
 
@@ -5269,7 +5335,7 @@ json_outputs(string tx_hash_str,
     if (!xmreg::parse_str_address(address_str,  address_info, nettype))
     {
         j_response["status"]  = "error";
-        j_response["message"] = "Cant parse monero address: " + address_str;
+        j_response["message"] = "Cant parse haven address: " + address_str;
         return j_response;
 
     }
@@ -5338,7 +5404,7 @@ json_outputs(string tx_hash_str,
     j_data["outputs"] = json::array();
     json& j_outptus   = j_data["outputs"];
 
-    for (pair<txout_to_key, uint64_t>& outp: txd.output_pub_keys)
+    for (pair<txout_target_v, uint64_t>& outp: txd.output_pub_keys)
     {
 
         // get the tx output public key
@@ -5352,7 +5418,12 @@ json_outputs(string tx_hash_str,
                           tx_pubkey);
 
         // check if generated public key matches the current output's key
-        bool mine_output = (outp.first.key == tx_pubkey);
+	crypto::public_key out_key;
+	if (outp.first.type() == typeid(txout_to_key))
+	  out_key = boost::get<cryptonote::txout_to_key>(outp.first).key;
+	else if (outp.first.type() == typeid(txout_offshore))
+	  out_key = boost::get<cryptonote::txout_offshore>(outp.first).key;
+        bool mine_output = (out_key == tx_pubkey);
         bool with_additional = false;
         if (!mine_output && txd.additional_pks.size() == txd.output_pub_keys.size())
         {
@@ -5360,12 +5431,12 @@ json_outputs(string tx_hash_str,
                               output_idx,
                               address_info.address.m_spend_public_key,
                               tx_pubkey);
-            mine_output = (outp.first.key == tx_pubkey);
+	    mine_output = (out_key == tx_pubkey);
             with_additional = true;
         }
 
         // if mine output has RingCT, i.e., tx version is 2
-        if (mine_output && tx.version == 2)
+        if (mine_output && tx.version >= 2)
         {
             // cointbase txs have amounts in plain sight.
             // so use amount from ringct, only for non-coinbase txs
@@ -5396,7 +5467,7 @@ json_outputs(string tx_hash_str,
         }  // if (mine_output && tx.version == 2)
 
         j_outptus.push_back(json {
-                {"output_pubkey", pod_to_hex(outp.first.key)},
+                {"output_pubkey", pod_to_hex(out_key)},
                 {"amount"       , outp.second},
                 {"match"        , mine_output},
                 {"output_idx"   , output_idx},
@@ -5467,7 +5538,7 @@ json_outputsblocks(string _limit,
     if (address_str.empty())
     {
         j_response["status"]  = "error";
-        j_response["message"] = "Monero address not provided";
+        j_response["message"] = "Haven address not provided";
         return j_response;
     }
 
@@ -5484,7 +5555,7 @@ json_outputsblocks(string _limit,
     if (!xmreg::parse_str_address(address_str, address_info, nettype))
     {
         j_response["status"]  = "error";
-        j_response["message"] = "Cant parse monero address: " + address_str;
+        j_response["message"] = "Cant parse haven address: " + address_str;
         return j_response;
 
     }
@@ -5633,7 +5704,7 @@ json_networkinfo()
     if (!get_monero_network_info(j_info))
     {
         j_response["status"]  = "error";
-        j_response["message"] = "Cant get monero network info";
+        j_response["message"] = "Cant get haven network info";
         return j_response;
     }
 
@@ -5704,6 +5775,28 @@ json_emission()
 }
 
 
+
+/*
+ * Lets use this json api convention for success and error
+ * https://labs.omniti.com/labs/jsend
+ */
+json
+json_circulating()
+{
+    std::string circulation_spply;
+
+    vector<pair<string, int64_t>> supply = CurrentBlockchainStatus::get_circulating_supply();
+    for(const auto& currency: supply) {
+        if(currency.first == "XHV") {
+            circulation_spply = xmr_amount_to_str(currency.second, "{:0.3f}");
+        }
+    }
+
+    return circulation_spply;
+}
+
+
+
 /*
       * Lets use this json api convention for success and error
       * https://labs.omniti.com/labs/jsend
@@ -5809,7 +5902,7 @@ find_our_outputs(
         //j_data["outputs"] = json::array();
         //json& j_outptus   = j_data["outputs"];
 
-        for (pair<txout_to_key, uint64_t> &outp: txd.output_pub_keys)
+        for (pair<txout_target_v, uint64_t> &outp: txd.output_pub_keys)
         {
 
             // get the tx output public key
@@ -5823,7 +5916,16 @@ find_our_outputs(
                               tx_pubkey);
 
             // check if generated public key matches the current output's key
-            bool mine_output = (outp.first.key == tx_pubkey);
+	    crypto::public_key out_key;
+	    string currency_str;
+	    if (outp.first.type() == typeid(txout_to_key)) {
+	      out_key = boost::get<cryptonote::txout_to_key>(outp.first).key;
+	      currency_str = "XHV";
+	    } else if (outp.first.type() == typeid(txout_offshore)) {
+	      out_key = boost::get<cryptonote::txout_offshore>(outp.first).key;
+	      currency_str = "xUSD";
+	    }
+	    bool mine_output = (out_key == tx_pubkey);
             bool with_additional = false;
             if (!mine_output && txd.additional_pks.size() == txd.output_pub_keys.size())
             {
@@ -5831,12 +5933,12 @@ find_our_outputs(
                                   output_idx,
                                   address.m_spend_public_key,
                                   tx_pubkey);
-                mine_output = (outp.first.key == tx_pubkey);
+		 mine_output = (out_key == tx_pubkey);
                 with_additional = true;
             }
 
             // if mine output has RingCT, i.e., tx version is 2
-            if (mine_output && tx.version == 2)
+            if (mine_output && tx.version >= 2)
             {
                 // cointbase txs have amounts in plain sight.
                 // so use amount from ringct, only for non-coinbase txs
@@ -5875,13 +5977,14 @@ find_our_outputs(
                 string payment_id_str = get_payment_id_as_string(txd, prv_view_key);
 
                 j_outptus.push_back(json {
-                        {"output_pubkey" , pod_to_hex(outp.first.key)},
+                        {"output_pubkey" , pod_to_hex(out_key)},
                         {"amount"        , outp.second},
                         {"block_no"      , block_no},
                         {"in_mempool"    , is_mempool},
                         {"output_idx"    , output_idx},
                         {"tx_hash"       , pod_to_hex(txd.hash)},
-                        {"payment_id"    , payment_id_str}
+                        {"payment_id"    , payment_id_str},
+			{"currency"      , currency_str}
                 });
             }
 
@@ -6396,8 +6499,11 @@ construct_tx_context(transaction tx, uint16_t with_ring_signatures = 0)
     mstch::array outputs;
 
     uint64_t outputs_xmr_sum {0};
+    uint64_t outputs_xusd_sum {0};
 
-    for (pair<txout_to_key, uint64_t>& outp: txd.output_pub_keys)
+    cerr << "HBD : got " << txd.output_pub_keys.size() << " output keys" << endl;
+    
+    for (pair<txout_target_v, uint64_t>& outp: txd.output_pub_keys)
     {
 
         // total number of ouputs in the blockchain for this amount
@@ -6414,20 +6520,34 @@ construct_tx_context(transaction tx, uint16_t with_ring_signatures = 0)
                     = std::to_string(out_amount_indices.at(output_idx));
         }
 
-        outputs_xmr_sum += outp.second;
-
-        outputs.push_back(mstch::map {
-                {"out_pub_key"           , pod_to_hex(outp.first.key)},
+	crypto::public_key out_key;
+	std::string currency;
+	if (outp.first.type() == typeid(txout_to_key)) {
+	  outputs_xmr_sum += outp.second;
+	  out_key = boost::get<cryptonote::txout_to_key>(outp.first).key;
+	  currency = "XHV";
+	} else if (outp.first.type() == typeid(txout_offshore)) {
+	  outputs_xusd_sum += outp.second;
+	  out_key = boost::get<cryptonote::txout_offshore>(outp.first).key;
+	  currency = "xUSD";
+	}
+	
+	outputs.push_back(mstch::map {
+                {"out_pub_key"           , pod_to_hex(out_key)},
                 {"amount"                , xmreg::xmr_amount_to_str(outp.second)},
                 {"amount_idx"            , out_amount_index_str},
                 {"num_outputs"           , num_outputs_amount},
                 {"unformated_output_idx" , output_idx},
-                {"output_idx"            , fmt::format("{:02d}", output_idx++)}
+		{"output_idx"            , fmt::format("{:02d}", output_idx++)},
+		{"currency"              , currency}
         });
 
+	cerr << "\tkey = " << pod_to_hex(out_key) << "\n\tamount = " << xmreg::xmr_amount_to_str(outp.second) << endl;
+	
     } //  for (pair<txout_to_key, uint64_t>& outp: txd.output_pub_keys)
 
     context["outputs_xmr_sum"] = xmreg::xmr_amount_to_str(outputs_xmr_sum);
+    context["outputs_xusd_sum"] = xmreg::xmr_amount_to_str(outputs_xusd_sum);
 
     context.emplace("outputs", outputs);
 
